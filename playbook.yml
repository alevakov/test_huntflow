---
- name: Install and configure services on Ubuntu 20.04 (ARM64)
  hosts: all
  become: yes
  tasks:

    # Установка зависимостей и утилит для работы с репозиториями Docker 
    - name: Install dependencies for Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg2
          - software-properties-common
          - python3-pip  # Установка pip для Python 3
        state: present
        update_cache: yes

    # Добавление GPG-ключа Docker
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    # Добавление репозитория Docker для ARM64
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=arm64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        state: present

    # Обновление пакетов и установка Docker
    - name: Update apt package cache and upgrade system
      apt:
        upgrade: yes
        update_cache: yes

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    # Добавление текущего пользователя в группу docker
    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        group: docker
        append: yes

    # Установка/обновление pyopenssl и cryptography ( возможно не обязательный параметр но в моем случае возникала проблема с SSL
    - name: Install/upgrade pyopenssl
      pip:
        name: pyopenssl
        state: latest

    - name: Install/upgrade cryptography
      pip:
        name: cryptography
        state: latest

    # Установка совместимой версии Docker SDK для Python
    - name: Install compatible Docker SDK for Python
      pip:
        name: docker
        state: latest

    # Установка docker-compose Python library
    - name: Install docker-compose Python library
      pip:
        name: docker-compose
        state: present

    # Настройка незащищенных реестров Docker (необязательный параметр)
    - name: Configure Docker to allow insecure registries
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "insecure-registries": ["rock64-01.local:5000", "10.0.1.5:5000"]
          }
        mode: '0644'

    # Перезапуск Docker для применения изменений
    - name: Restart Docker service
      service:
        name: docker
        state: restarted

    # Установка Docker Compose
    - name: Install Docker Compose
      shell: |
        curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
      args:
        creates: /usr/local/bin/docker-compose

    # Создание файла конфигурации prometheus.yml
    - name: Create prometheus.yml configuration file
      copy:
        dest: /vagrant/prometheus.yml
        content: |
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'node'
              static_configs:
                - targets: ['node_exporter:9100']
        mode: '0644'

    # Запуск Docker Compose для запуска Prometheus и Grafana
    - name: Run Docker Compose to start Prometheus and Grafana containers
      community.docker.docker_compose_v2:
        project_src: /vagrant
        state: present  # Указываем состояние (present для запуска контейнеров)
        recreate: always
        remove_orphans: true
    
    # Создание структуры каталогов для Grafana provisioning
    - name: Ensure Grafana provisioning directories exist
      file:
        path: "/vagrant/grafana/provisioning/dashboards"
        state: directory
        mode: '0755'

    # Скачивание JSON-файла дашборда Node Exporter Full
    - name: Download Node Exporter Full dashboard JSON
      get_url:
        url: "https://grafana.com/api/dashboards/1860/revisions/latest/download"
        dest: "/vagrant/grafana/provisioning/dashboards/node-exporter-full.json"
        mode: '0644'

    # Конфигурация auto-import для Grafana
    - name: Create Grafana dashboard provisioning config
      copy:
        dest: /vagrant/grafana/provisioning/dashboards/dashboards.yml
        content: |
          apiVersion: 1
          providers:
            - name: "default"
              orgId: 1
              folder: ""
              type: "file"
              disableDeletion: false
              updateIntervalSeconds: 10
              options:
                path: "/etc/grafana/provisioning/dashboards"
        mode: '0644'

    # Создание структуры каталогов для Grafana provisioning
    - name: Ensure Grafana provisioning directories exist
      file:
        path: "/vagrant/grafana/provisioning/datasources"
        state: directory
        mode: '0755'

    # Создание конфигурации источника данных для Grafana
    - name: Create Grafana datasource configuration
      copy:
        dest: /vagrant/grafana/provisioning/datasources/datasources.yml
        content: |
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              url: http://prometheus:9090  # Используем имя сервиса prometheus
              access: proxy
              isDefault: true
        mode: '0644'


    # Перезапуск контейнеров для загрузки изменений
    - name: Restart Docker Compose
      community.docker.docker_compose_v2:
        project_src: /vagrant
        state: restarted
